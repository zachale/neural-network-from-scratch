import math
import random

##if number is divisible by 5


class neuron:

    def __init__(self, connections, weights) -> None:
         self.c = connections
         self.w = weights
         self.value = 0
         self.bias = 0

def sigmoid(val):
    return 1/(1 + math.exp(-val))

def calc(neuron):
    
    connections = neuron.c
    weights = neuron.w

    total = float(0)
    z = 0

    while z < len(connections):
        total =  connections[z] * weights[z]
        z += 1
        
    val = total + neuron.bias
    neuron.value = sigmoid(val)


def network (x,y, w, b):
    

    n1 = neuron([x], [w[0]])
    n1.bias = b[0]
    n11 = neuron([y], [w[0]])
    n11.bias = b[0]
    calc(n1)
    calc(n11)

    n21 = neuron([n1.value, n11.value], [w[1], w[2]])
    n21.bias = b[1]
    n22 = neuron([n1.value, n11.value], [w[3], w[4]])
    n22.bias = b[2]
    n23 = neuron([n1.value, n11.value], [w[5], w[6]])
    n23.bias = b[3]

    neurons = [n21,n22,n23]
    for z in neurons:
        calc(z)

    n31 = neuron([n21.value, n22.value, n23.value], [w[7],w[8],w[9]])


    calc(n31)
   
    return(n31.value)



def error(data, w, b):

    error = float(0)

    result = 0

    for x in data:
        result = network(x[0], x[1], w, b)
        error = error + (x[2] - result) 

 

    avError = error / len(data)
    return avError




test = [[341, 314, 1], [488, 434, 1], [346, 66, 0], [11, 382, 1], [75, 58, 0], [470, 275, 1], [172, 466, 1], [418, 148, 1], [391, 95, 0], [27, 152, 0], [214, 454, 1], [483, 110, 1], [495, 235, 1], [247, 218, 1], [221, 226, 1], [480, 67, 1], [197, 496, 1], [252, 46, 0], [125, 456, 1], [384, 255, 1], [65, 463, 1], [7, 174, 0], [101, 152, 0], [449, 341, 1], [212, 96, 0], [79, 263, 0], [200, 277, 1], [360, 495, 1], [239, 251, 1], [25, 133, 0], [426, 286, 1], [184, 205, 0], [440, 172, 1], [322, 29, 0], [115, 214, 0], [112, 324, 1], [226, 96, 0], [385, 8, 0], [21, 409, 1], [272, 374, 1], [123, 107, 0], [187, 472, 1], [28, 58, 0], [496, 24, 0], [279, 74, 0], [283, 196, 1], [306, 236, 1], [153, 472, 1], [45, 166, 0], [376, 243, 1], [451, 65, 0], [391, 183, 1], [348, 179, 1], [67, 97, 0], [436, 217, 1], [464, 163, 1], [206, 135, 0], [270, 172, 0], [340, 35, 0], [82, 65, 0], [300, 491, 1], [393, 171, 1], [106, 216, 0], [405, 281, 1], [145, 215, 0], [158, 470, 1], [148, 359, 1], [75, 61, 0], [457, 247, 1], [35, 327, 1], [254, 475, 1], [44, 61, 0], [401, 365, 1], [393, 434, 1], [500, 440, 1], [490, 342, 1], [81, 143, 0], [134, 100, 0], [28, 184, 0], [407, 278, 1], [227, 411, 1], [9, 396, 1], [477, 33, 0], [266, 6, 0], [308, 152, 0], [401, 121, 0], [40, 307, 1], [208, 134, 0], [317, 125, 0], [481, 255, 1], [324, 185, 1], [64, 290, 1], [95, 153, 0], [448, 417, 1], [302, 363, 1], [147, 499, 1], [137, 490, 1], [125, 323, 1], [391, 342, 1], [336, 365, 1], [178, 15, 0], [365, 403, 1], [370, 275, 1], [483, 446, 1], [228, 462, 1], [221, 278, 1], [111, 276, 1], [88, 48, 0], [475, 377, 1], [332, 276, 1], [120, 99, 0], [450, 207, 1], [311, 310, 1], [422, 497, 1], [200, 264, 1], [80, 498, 1], [455, 368, 1], [109, 198, 0], [181, 396, 1], [147, 74, 0], [284, 182, 0], [482, 481, 1], [138, 287, 1], [338, 260, 1], [493, 3, 0], [16, 112, 0], [259, 140, 0], [136, 449, 1], [225, 215, 0], [419, 346, 1], [94, 332, 1], [483, 238, 1], [436, 177, 1], [398, 172, 1], [453, 196, 1], [169, 497, 1], [337, 479, 1], [332, 418, 1], [378, 339, 1], [468, 423, 1], [349, 95, 0], [414, 336, 1], [174, 272, 1], [258, 351, 1], [70, 196, 0], [51, 388, 1], [7, 93, 0], [389, 497, 1], [284, 496, 1], [208, 319, 1], [337, 197, 1], [362, 481, 1], [16, 187, 0], [314, 261, 1], [498, 222, 1], [277, 465, 1], [237, 437, 1], [340, 288, 1], [112, 66, 0], [267, 378, 1], [83, 271, 0], [113, 175, 0], [463, 237, 1], [136, 277, 1], [451, 304, 1], [472, 40, 0], [116, 294, 1], [90, 324, 1], [318, 143, 0], [382, 135, 0], [309, 43, 0], [73, 56, 0], [331, 379, 1], [402, 280, 1], [2, 189, 0], [392, 212, 1], [425, 458, 1], [186, 350, 1], [172, 158, 0], [343, 113, 0], [380, 49, 0], [491, 191, 1], [15, 446, 1], [258, 298, 1], [359, 366, 1], [393, 451, 1], [468, 211, 1], [211, 464, 1], [490, 89, 1], [78, 380, 1], [95, 122, 0], [352, 104, 0], [349, 142, 0], [300, 382, 1], [299, 53, 0], [450, 454, 1], [9, 71, 0], [288, 299, 1], [81, 198, 0], [72, 408, 1], [310, 408, 1], [242, 371, 1], [150, 445, 1], [178, 33, 0], [13, 385, 1], [333, 147, 0], [493, 317, 1], [493, 236, 1], [497, 485, 1], [204, 32, 0], [299, 218, 1], [106, 416, 1], [245, 164, 0], [340, 174, 1], [412, 472, 1], [15, 432, 1], [241, 208, 0], [273, 144, 0], [423, 481, 1], [268, 182, 0], [274, 335, 1], [154, 472, 1], [164, 294, 1], [352, 117, 0], [353, 423, 1], [50, 245, 0], [15, 314, 1], [295, 270, 1], [143, 194, 0], [268, 278, 1], [408, 16, 0], [268, 52, 0], [243, 90, 0], [73, 478, 1], [13, 455, 1], [339, 461, 1], [41, 100, 0], [244, 65, 0], [51, 372, 1], [106, 394, 1], [66, 244, 0], [39, 436, 1], [110, 252, 0], [378, 68, 0], [67, 444, 1], [478, 160, 1], [443, 48, 0], [147, 166, 0], [310, 75, 0], [78, 130, 0], [146, 225, 0], [141, 405, 1], [233, 83, 0], [341, 409, 1], [214, 82, 0], [464, 413, 1], [216, 287, 1], [142, 2, 0], [489, 400, 1], [467, 100, 1], [449, 390, 1], [446, 382, 1], [144, 362, 1], [264, 468, 1], [295, 167, 0], [407, 481, 1], [49, 346, 1], [68, 196, 0], [106, 413, 1], [340, 468, 1], [492, 271, 1], [451, 284, 1], [364, 260, 1], [183, 102, 0], [344, 258, 1], [421, 412, 1], [128, 430, 1], [447, 5, 0], [37, 491, 1], [349, 105, 0], [387, 295, 1], [430, 445, 1], [492, 276, 1], [27, 226, 0], [337, 234, 1], [304, 236, 1], [117, 266, 0], [3, 34, 0], [482, 2, 0], [468, 106, 1], [16, 222, 0], [281, 263, 1], [108, 332, 1], [28, 15, 0], [51, 408, 1], [464, 415, 1], [12, 164, 0], [366, 59, 0], [259, 316, 1], [156, 463, 1], [12, 29, 0], [87, 387, 1], [333, 362, 1], [321, 350, 1], [55, 298, 1], [253, 35, 0], [93, 277, 1], [471, 101, 1], [269, 401, 1], [32, 153, 0], [432, 357, 1], [196, 48, 0], [377, 81, 0], [271, 365, 1], [140, 366, 1], [304, 132, 0], [479, 145, 1], [238, 3, 0], [436, 259, 1], [208, 127, 0], [65, 458, 1], [377, 417, 1], [57, 477, 1], [359, 119, 0], [2, 172, 0], [136, 370, 1], [242, 217, 1], [146, 439, 1], [3, 490, 1], [197, 433, 1], [234, 53, 0], [101, 397, 1], [289, 237, 1], [254, 158, 0], [130, 84, 0], [290, 257, 1], [197, 51, 0], [48, 83, 0], [427, 233, 1], [62, 192, 0], [268, 162, 0], [323, 42, 0], [452, 237, 1], [362, 423, 1], [191, 133, 0], [30, 402, 1], [136, 68, 0], [460, 388, 1], [70, 375, 1], [237, 401, 1], [269, 38, 0], [95, 498, 1], [430, 179, 1], [408, 450, 1], [365, 241, 1], [1, 268, 0], [475, 408, 1], [326, 271, 1], [6, 132, 0], [424, 318, 1], [484, 24, 0], [116, 242, 0], [206, 360, 1], [267, 360, 1], [89, 128, 0], [196, 490, 1], [219, 222, 0], [418, 275, 1], [269, 160, 0], [288, 222, 1], [114, 17, 0], [151, 259, 1], [451, 213, 1], [249, 280, 1], [259, 491, 1], [83, 272, 0], [446, 182, 1], [188, 148, 0], [260, 313, 1], [444, 31, 0], [270, 411, 1], [176, 18, 0], [438, 62, 0], [181, 352, 1], [268, 316, 1], [445, 35, 0], [245, 8, 0], [248, 322, 1], [366, 1, 0], [445, 492, 1], [108, 231, 0], [92, 396, 1], [394, 113, 0], [463, 412, 1], [274, 490, 1], [128, 194, 0], [25, 315, 1], [470, 14, 0], [359, 74, 0], [288, 134, 0], [238, 391, 1], [214, 434, 1], [375, 437, 1], [460, 291, 1], [157, 384, 1], [183, 421, 1], [255, 393, 1], [464, 81, 1], [8, 5, 0], [268, 8, 0], [212, 17, 0], [485, 408, 1], [68, 393, 1], [182, 73, 0], [366, 409, 1], [135, 265, 1], [196, 302, 1], [460, 42, 0], [174, 401, 1], [463, 203, 1], [263, 355, 1], [468, 250, 1], [171, 367, 1], [427, 164, 1], [480, 345, 1], [38, 332, 1], [404, 177, 1], [400, 449, 1], [431, 410, 1], [412, 367, 1], [58, 243, 0], [61, 212, 0], [313, 293, 1], [211, 78, 0], [394, 409, 1], [326, 59, 0], [119, 25, 0], [85, 284, 1], [7, 72, 0], [8, 395, 1], [480, 94, 1], [18, 138, 0], [121, 460, 1], [165, 98, 0], [463, 436, 1], [11, 202, 0], [478, 488, 1], [499, 136, 1], [486, 73, 1], [329, 382, 1], [149, 103, 0], [82, 317, 1], [378, 436, 1], [228, 476, 1], [175, 206, 0], [177, 424, 1], [170, 210, 0], [345, 20, 0], [96, 203, 0], [366, 450, 1], [259, 272, 1], [163, 375, 1], [304, 7, 0], [409, 326, 1], [134, 312, 1], [296, 146, 0], [25, 483, 1], [261, 498, 1], [207, 136, 0], [147, 224, 0], [486, 461, 1], [187, 473, 1], [180, 165, 0], [7, 18, 0], [151, 34, 0], [130, 334, 1], [340, 432, 1], [336, 83, 0], [219, 47, 0], [346, 98, 0], [97, 281, 1], [93, 413, 1], [72, 114, 0], [387, 60, 0], [278, 367, 1], [81, 327, 1], [156, 163, 0], [13, 363, 1], [88, 125, 0], [42, 337, 1], [402, 406, 1], [423, 376, 1], [493, 66, 1], [2, 163, 0], [29, 191, 0], [314, 124, 0], [252, 358, 1], [474, 320, 1], [49, 389, 1]]

w = [0.4008750817183757, 0.8077675112546763, 0.27960887021878034, 0.16095576601763262, 0.153882819398943, 0.3638799699615243, 0.17177518276042547, 0.04728176190779487, 0.38729911385964644, 0.8507414276930889]
b = [71.60973724341827, 80.96555957926057, 17.319757148537875, 23.065524954068305, 79.98466191322619]
besterror = 10000
bestw = []
bestb = []

m = True
x = 500
y = 500



if(m):
    p = 0
    while p < 100000:
        i=0
        while i < 10:
            w[i] = random.random()
            i+=1
        
        i=0
        while i < 5:
            b[i] = random.random() * 10
            i+=1

        c = error(test, w, b)

        if c < besterror:
            bestw = w
            bestb = b
            besterror = c
            print(c)
            
        p += 1

    print(c)
    print(bestb)
    print(bestw)
else:
    # print(error(test,w,b))
    result = network(x,y, w,b)
    print(result)
    if round(result) == 1:
        print("{} and {} are probably above the function".format(x,y))
    else:
        print("{} and {} are NOT above the function".format(x,y))

